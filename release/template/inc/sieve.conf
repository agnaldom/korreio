[Menu]
id = 100
parent = -1
display name = Require

[Item]
id = 101
parent = 100
display name = regex
strip script = no
sieve script = << EOF
require "regex";

EOF

[Item]
id = 102
parent = 100
display name = fileinto
strip script = no
sieve script = << EOF
require "fileinto";

EOF

[Item]
id = 103
parent = 100
display name = fileinto, regex
strip script = no
sieve script = << EOF
require ["fileinto", "regex"];

EOF

[Item]
id = 104
parent = 100
display name = imapflags
strip script = no
sieve script = << EOF
require "imapflags";

EOF

[Item]
id = 105
parent = 100
display name = imapflags, regex
strip script = no
sieve script = << EOF
require ["imapflags", "regex"];

EOF

[Item]
id = 106
parent = 100
display name = vacation
strip script = no
sieve script = << EOF
require "vacation";

EOF

[Item]
id = 107
parent = 100
display name = reject
strip script = no
sieve script = << EOF
require "reject";

EOF

[Item]
id = 108
parent = 100
display name = fileinto, imapflags
strip script = no
sieve script = << EOF
require ["fileinto", "imapflags"];

EOF

[Item]
id = 109
parent = 100
display name = fileinto, imapflags, regex
strip script = no
sieve script = << EOF
require ["fileinto", "imapflags", "regex"];

EOF

[Item]
id = 110
parent = 100
display name = fileinto, vacation
strip script = no
sieve script = << EOF
require ["fileinto", "vacation"];

EOF

[Item]
id = 111
parent = 100
display name = fileinto, vacation, regex
strip script = no
sieve script = << EOF
require ["fileinto", "vacation", "regex"];

EOF

[Item]
id = 112
parent = 100
display name = All modules
strip script = no
sieve script = << EOF
require ["regex", "fileinto", "imapflags", "vacation", "reject"];

EOF

[Menu]
id = 200
parent = -1
display name = Clause

[Item]
id = 201
parent = 200
display name = if
strip script = no
sieve script = << EOF
if  {

}

EOF

[Item]
id = 202
parent = 200
display name = if anyof (or)
strip script = no
sieve script = << EOF
if anyof (, ) {

}

EOF

[Item]
id = 203
parent = 200
display name = if allof (and)
strip script = no
sieve script = << EOF
if allof (, ) {

}

EOF

[Item]
id = 204
parent = 200
display name = else if
strip script = no
sieve script = << EOF
elsif  {

}

EOF

[Item]
id = 205
parent = 200
display name = else if anyof (or)
strip script = no
sieve script = << EOF
elsif anyof (, ) {

}

EOF

[Item]
id = 206
parent = 200
display name = else if allof (and)
strip script = no
sieve script = << EOF
elsif allof (, ) {

}

EOF

[Item]
id = 207
parent = 200
display name = Sender whitelist
strip script = no
sieve script = << EOF
if address :is "from" ["sender1@example.com", "sender2@example.com"] {
    stop;
}

EOF

[Item]
id = 208
parent = 200
display name = Spam (SpamAssassin)
strip script = no
sieve script = << EOF
if header :is "X-Spam-Flag" "YES" {
    fileinto "INBOX/Spam";
    stop;
}

EOF

[Menu]
id = 300
parent = -1
display name = Condition

[Menu]
id = 301
parent = 300
display name = From:

[Item]
id = 350
parent = 301
display name = is
strip script = yes
sieve script = << EOF
address :is "from" "sender@example.com"
EOF

[Item]
id = 351
parent = 301
display name = not is
strip script = yes
sieve script = << EOF
not address :is "from" "sender@example.com"
EOF

[Item]
id = 352
parent = 301
display name = contains
strip script = yes
sieve script = << EOF
address :contains "from" "sender@example.com"
EOF

[Item]
id = 353
parent = 301
display name = not contains
strip script = yes
sieve script = << EOF
not address :contains "from" "sender@example.com"
EOF

[Item]
id = 354
parent = 301
display name = matches
strip script = yes
sieve script = << EOF
address :matches "from" "sender@example.com"
EOF

[Item]
id = 355
parent = 301
display name = does not match
strip script = yes
sieve script = << EOF
not address :matches "from" "sender@example.com"
EOF

[Item]
id = 356
parent = 301
display name = matches regular expression
strip script = yes
sieve script = << EOF
address :regex "from" "sender@example.com"
EOF

[Item]
id = 357
parent = 301
display name = does not match regular expression
strip script = yes
sieve script = << EOF
not address :regex "from" "sender@example.com"
EOF

[Menu]
id = 302
parent = 300
display name = To:

[Item]
id = 360
parent = 302
display name = is
strip script = yes
sieve script = << EOF
address :is "to" "recipient@example.com"
EOF

[Item]
id = 361
parent = 302
display name = not is
strip script = yes
sieve script = << EOF
not address :is "to" "recipient@example.com"
EOF

[Item]
id = 362
parent = 302
display name = contains
strip script = yes
sieve script = << EOF
address :contains "to" "recipient@example.com"
EOF

[Item]
id = 363
parent = 302
display name = not contains
strip script = yes
sieve script = << EOF
not address :contains "to" "recipient@example.com"
EOF

[Item]
id = 364
parent = 302
display name = matches
strip script = yes
sieve script = << EOF
address :matches "to" "recipient@example.com"
EOF

[Item]
id = 365
parent = 302
display name = does not match
strip script = yes
sieve script = << EOF
not address :matches "to" "recipient@example.com"
EOF

[Item]
id = 366
parent = 302
display name = matches regular expression
strip script = yes
sieve script = << EOF
address :regex "to" "recipient@example.com"
EOF

[Item]
id = 367
parent = 302
display name = does not match regular expression
strip script = yes
sieve script = << EOF
not address :regex "to" "recipient@example.com"
EOF

[Menu]
id = 303
parent = 300
display name = To: or Cc:

[Item]
id = 370
parent = 303
display name = is
strip script = yes
sieve script = << EOF
address :is ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 371
parent = 303
display name = not is
strip script = yes
sieve script = << EOF
not address :is ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 372
parent = 303
display name = contains
strip script = yes
sieve script = << EOF
address :contains ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 373
parent = 303
display name = not contains
strip script = yes
sieve script = << EOF
not address :contains ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 374
parent = 303
display name = matches
strip script = yes
sieve script = << EOF
address :matches ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 375
parent = 303
display name = does not match
strip script = yes
sieve script = << EOF
not address :matches ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 376
parent = 303
display name = matches regular expression
strip script = yes
sieve script = << EOF
address :regex ["to", "cc"] "recipient@example.com"
EOF

[Item]
id = 377
parent = 303
display name = does not match regular expression
strip script = yes
sieve script = << EOF
not address :regex ["to", "cc"] "recipient@example.com"
EOF

[Menu]
id = 304
parent = 300
display name = Subject:

[Item]
id = 380
parent = 304
display name = is
strip script = yes
sieve script = << EOF
header :is "subject" "some text"
EOF

[Item]
id = 381
parent = 304
display name = not is
strip script = yes
sieve script = << EOF
not header :is "subject" "some text"
EOF

[Item]
id = 382
parent = 304
display name = contains
strip script = yes
sieve script = << EOF
header :contains "subject" "some text"
EOF

[Item]
id = 383
parent = 304
display name = not contains
strip script = yes
sieve script = << EOF
not header :contains "subject" "some text"
EOF

[Item]
id = 384
parent = 304
display name = matches
strip script = yes
sieve script = << EOF
header :matches "subject" "some text"
EOF

[Item]
id = 385
parent = 304
display name = does not match
strip script = yes
sieve script = << EOF
not header :matches "subject" "some text"
EOF

[Item]
id = 386
parent = 304
display name = matches regular expression
strip script = yes
sieve script = << EOF
header :regex "subject" "some text"
EOF

[Item]
id = 387
parent = 304
display name = does not match regular expression
strip script = yes
sieve script = << EOF
not header :regex "subject" "some text"
EOF

[Menu]
id = 305
parent = 300
display name = Custom header

[Item]
id = 390
parent = 305
display name = is
strip script = yes
sieve script = << EOF
header :is "another-header" "some text"
EOF

[Item]
id = 391
parent = 305
display name = not is
strip script = yes
sieve script = << EOF
not header :is "another-header" "some text"
EOF

[Item]
id = 392
parent = 305
display name = contains
strip script = yes
sieve script = << EOF
header :contains "another-header" "some text"
EOF

[Item]
id = 393
parent = 305
display name = not contains
strip script = yes
sieve script = << EOF
not header :contains "another-header" "some text"
EOF

[Item]
id = 394
parent = 305
display name = matches
strip script = yes
sieve script = << EOF
header :matches "another-header" "some text"
EOF

[Item]
id = 395
parent = 305
display name = does not match
strip script = yes
sieve script = << EOF
not header :matches "another-header" "some text"
EOF

[Item]
id = 396
parent = 305
display name = matches regular expression
strip script = yes
sieve script = << EOF
header :regex "another-header" "some text"
EOF

[Item]
id = 397
parent = 305
display name = does not match regular expression
strip script = yes
sieve script = << EOF
not header :regex "another-header" "some text"
EOF

[Item]
id = 310
parent = 300
display name = Size over
strip script = yes
sieve script = << EOF
size :over 1024K
EOF

[Item]
id = 311
parent = 300
display name = Size under
strip script = yes
sieve script = << EOF
size :under 1024K
EOF

[Item]
id = 312
parent = 300
display name = X-Spam-Flag: YES
strip script = yes
sieve script = << EOF
header :contains "X-Spam-Flag" "YES"
EOF

[Menu]
id = 400
parent = -1
display name = Action

[Item]
id = 401
parent = 400
display name = Forward only
strip script = no
sieve script = << EOF
redirect "user@example.com";
EOF

[Item]
id = 402
parent = 400
display name = Forward and keep a copy
strip script = no
sieve script = << EOF
redirect "user@example.com";
keep;
EOF

[Item]
id = 403
parent = 400
display name = Discard the message
strip script = no
sieve script = << EOF
discard;
EOF

[Item]
id = 404
parent = 400
display name = Stop processing
strip script = no
sieve script = << EOF
stop;
EOF

[Item]
id = 405
parent = 400
display name = File into folder
strip script = no
sieve script = << EOF
fileinto "INBOX/foldername";
EOF

[Item]
id = 406
parent = 400
display name = Send a vacation message
strip script = no
sieve script = << EOF
require "vacation";
vacation :days 5
:subject "I'am on vacation"
:addresses ["#USER#@example.com"] text:
I will be on vacation at days ....

Thank you,

--
User Sign
.
;

EOF

[Item]
id = 407
parent = 400
display name = Send a reject message
strip script = no
sieve script = << EOF
reject text:

Your message has been rejeted.
.
;

EOF

[Menu]
id = 500
parent = 400
display name = Set flag

[Item]
id = 501
parent = 500
display name = \\Seen
strip script = no
sieve script = << EOF
addflag "\\Seen";
EOF

[Item]
id = 502
parent = 500
display name = \\Deleted
strip script = no
sieve script = << EOF
addflag "\\Deleted";
EOF

[Item]
id = 503
parent = 500
display name = \\Answered
strip script = no
sieve script = << EOF
addflag "\\Answered";
EOF

[Item]
id = 504
parent = 500
display name = \\Flagged
strip script = no
sieve script = << EOF
addflag "\\Flagged";
EOF

[Item]
id = 505
parent = 500
display name = Junk
strip script = no
sieve script = << EOF
addflag "Junk";
EOF

[Item]
id = 506
parent = 500
display name = NotJunk
strip script = no
sieve script = << EOF
addflag "NotJunk";
EOF
